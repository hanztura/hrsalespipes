# Generated by Django 2.2.10 on 2020-04-06 13:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import simple_history.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('system', '0018_auto_20200403_1712'),
        ('contacts', '0028_auto_20200406_0304'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalClient',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('code', models.CharField(blank=True, max_length=50)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('contact_number', models.TextField(blank=True, max_length=32)),
                ('alternate_contact_number', models.CharField(blank=True, max_length=32)),
                ('whatsapp_link', models.URLField(blank=True)),
                ('email_address', models.EmailField(blank=True, max_length=254)),
                ('skype_id', models.CharField(blank=True, max_length=50)),
                ('ms_teams_id', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('industry', models.CharField(max_length=64)),
                ('location', models.CharField(max_length=64)),
                ('initial_approach', models.TextField(blank=True)),
                ('meeting_arranged', models.TextField(blank=True)),
                ('agreement_term', models.DecimalField(blank=True, decimal_places=5, default=1.0, max_digits=15)),
                ('agreement_fee', models.DecimalField(blank=True, decimal_places=10, default=0.0, max_digits=11)),
                ('refund_scheme', models.TextField(blank=True)),
                ('validity', models.DateField(blank=True, null=True)),
                ('point_of_contacts', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('business_development_person', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contacts.Employee')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical client',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCandidate',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('code', models.CharField(blank=True, max_length=50)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('contact_number', models.TextField(blank=True, max_length=32)),
                ('alternate_contact_number', models.CharField(blank=True, max_length=32)),
                ('whatsapp_link', models.URLField(blank=True)),
                ('email_address', models.EmailField(blank=True, max_length=254)),
                ('skype_id', models.CharField(blank=True, max_length=50)),
                ('ms_teams_id', models.CharField(blank=True, max_length=200)),
                ('location', models.CharField(blank=True, max_length=64)),
                ('current_previous_position', models.TextField(blank=True, verbose_name='position')),
                ('current_previous_company', models.CharField(blank=True, max_length=200, verbose_name='company')),
                ('current_previous_benefits', models.TextField(blank=True, verbose_name='salary and benefits')),
                ('current_previous_salary', models.IntegerField(blank=True, null=True)),
                ('motivation_for_leaving', models.TextField(blank=True)),
                ('expected_benefits', models.TextField(blank=True)),
                ('expected_salary', models.IntegerField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=64)),
                ('languages', models.TextField(blank=True, max_length=200)),
                ('preferred_location', models.CharField(blank=True, max_length=200)),
                ('civil_status', models.CharField(blank=True, choices=[('Single', 'Single'), ('Married', 'Married'), ('Widowed', 'Widowed'), ('Divorced', 'Divorced'), ('Separated', 'Separated')], max_length=16)),
                ('dependents', models.TextField(blank=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=8)),
                ('highest_educational_qualification', models.TextField(blank=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('is_medical', models.BooleanField(blank=True, default=False)),
                ('medical_experience_in_years', models.SmallIntegerField(blank=True, default=0)),
                ('specialization', models.TextField(blank=True, verbose_name='Field of specialization')),
                ('other_certifications', models.TextField(blank=True)),
                ('bls_validity', models.DateField(blank=True, null=True)),
                ('acls_validity', models.DateField(blank=True, null=True)),
                ('haad_dha_license_validity', models.DateField(blank=True, null=True)),
                ('haad_dha_license_type', models.CharField(blank=True, choices=[('HAAD', 'HAAD'), ('DHA', 'DHA')], max_length=5)),
                ('job_title_on_dha_haad', models.CharField(blank=True, max_length=250)),
                ('dataflow_last_update', models.DateField(blank=True, null=True)),
                ('driving_license', models.CharField(blank=True, max_length=100)),
                ('availability_for_interview', models.CharField(blank=True, max_length=200)),
                ('notice_period', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('candidate_owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contacts.Employee')),
                ('cv_template', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contacts.CVTemplate')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('visa_status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='system.VisaStatus')),
            ],
            options={
                'verbose_name': 'historical candidate',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
